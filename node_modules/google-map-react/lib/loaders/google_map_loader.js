'use strict';

exports.__esModule = true;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var BASE_URL = 'https://maps';
var DEFAULT_URL = BASE_URL + '.googleapis.com';
var API_PATH = '/maps/api/js?callback=googleMapsAPILoadedPromise';
var EVENT_GMAPS_LOADED = 'EVENT_GMAPS_LOADED';

var getBaseUrl = function getBaseUrl(region) {
  if (region && region.toLowerCase() === 'cn') {
    return BASE_URL + '.google.cn';
  }
  return DEFAULT_URL;
};

var currentResolver = null;
var lastBaseUrl = '';
var lastScriptUrl = '';
var googleMapsPromise = void 0;

var destroyOldGoogleMapsInstance = function destroyOldGoogleMapsInstance(url) {
  document.querySelectorAll('script[src^=\'' + url + '\']').forEach(function (script) {
    return script.remove();
  });
  if (window.google) delete window.google.maps;
};

// Callback for the Google Maps API src
window.googleMapsAPILoadedPromise = function () {
  return window.dispatchEvent(new CustomEvent(EVENT_GMAPS_LOADED));
};

var getScriptUrl = function getScriptUrl(bootstrapURLKeys) {
  var baseUrl = getBaseUrl(bootstrapURLKeys.region);
  var params = Object.keys(bootstrapURLKeys).reduce(function (r, key) {
    return r + '&' + key + '=' + bootstrapURLKeys[key];
  }, '');
  return '' + baseUrl + API_PATH + params;
};

var loadScript = function loadScript(url) {
  var script = document.createElement('script');

  script.type = 'text/javascript';
  script.async = true;
  script.src = url;
  document.querySelector('head').appendChild(script);

  return new Promise(function (resolve) {
    if (currentResolver) {
      window.removeEventListener(EVENT_GMAPS_LOADED, currentResolver);
    }
    currentResolver = function currentResolver() {
      resolve();
    };
    window.addEventListener(EVENT_GMAPS_LOADED, currentResolver);
  });
};

var loadGoogleMaps = function loadGoogleMaps(bootstrapURLKeys) {
  return new Promise(function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              lastScriptUrl = getScriptUrl(bootstrapURLKeys);
              _context.next = 3;
              return loadScript(lastScriptUrl);

            case 3:
              resolve(window.google.maps);

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

exports.default = function (bootstrapURLKeys) {
  if (typeof window === 'undefined') {
    throw new Error('google map cannot be loaded outside browser env');
  }

  if (process.env.NODE_ENV !== 'production') {
    if (Object.keys(bootstrapURLKeys).includes('callback')) {
      var message = '\'callback\' key in bootstrapURLKeys is not allowed, use onGoogleapiLoadedPromise property instead';
      // eslint-disable-next-line no-console
      console.error(message);
      throw new Error(message);
    }
  }
  if (googleMapsPromise) {
    if (lastScriptUrl !== getScriptUrl(bootstrapURLKeys)) {
      destroyOldGoogleMapsInstance(lastBaseUrl);
      googleMapsPromise = loadGoogleMaps(bootstrapURLKeys);
    }
    return googleMapsPromise;
  }

  googleMapsPromise = loadGoogleMaps(bootstrapURLKeys);
  lastBaseUrl = getBaseUrl(bootstrapURLKeys.region);

  return googleMapsPromise;
};